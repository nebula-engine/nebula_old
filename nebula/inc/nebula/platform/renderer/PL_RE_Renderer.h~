#ifndef _RENDER_H
#define _RENDER_H

#include <memory>

#include <boost/numeric/ublas/matrix.hpp>

using namespace std;

namespace Platform
{
	namespace Renderer
	{
		/// %Renderer
		class Renderer
		{
		public:
			/// constructor
			Renderer();
			/// destructor
			~Renderer();



			/// draw a quad
			virtual void					VDrawQuad();
			/// draw a cube
			virtual	void					VDrawCube();
			/// draw sphere
			virtual	void					VDrawSphere();
			/// push matrix onto stack
			virtual void					VPushMatrix();
			/// multiply matrix
			virtual void					VMultMatrix(boost::numeric::ublas::matrix<FLOAT>&);
			/// scale
			virtual void					VScale(boost::numeric::ublas::vector<FLOAT>&);
			/// pop matrix from the stack
			virtual void					VPopMatrix();
			/// lights
			virtual	void					VLight();

			
			/// initialize
			virtual void					VInit();
			/// update
			virtual	void					VUpdate();
			/// begin rendering
			virtual	void					VBeginRender();
			/// end rendering
			virtual	void					VEndRender();
			/// load identity
			virtual	void					VLoadIdentity();
			/// swap buffers
			virtual	void					VSwap();
			/// look at
			virtual void					VLookAt(boost::numeric::ublas::vector<FLOAT>&,boost::numeric::ublas::vector<FLOAT>&,boost::numeric::ublas::vector<FLOAT>&);
			/// resize window
			virtual void					VResize( int width, int height );


		
		private:
			/// app
			nebula::platform::base*				platform_;


			// data
			// TODO: insert data for meshing here; data should be tailored specifically for meshing and
			// should contain ALL data necessary for rendering
		
			
		};
	};
};

#endif














